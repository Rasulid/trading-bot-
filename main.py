import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from config import TELEGRAM_TOKEN, SYMBOL
from bybit_service import BybitService
from telegram_service import TelegramService
from trading_bot import TradingBot

# Initialize bot, dispatcher, and services
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
telegram_service = TelegramService()
bybit_service = BybitService()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Main menu keyboard
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É")],
        [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤")],
        [KeyboardButton(text="–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä")]
    ],
    resize_keyboard=True
)

# Currency pairs keyboard
currency_pairs_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="BTC/USDT")],
        [KeyboardButton(text="ETH/USDT")],
        [KeyboardButton(text="XRP/USDT")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def start_command(message: types.Message):
    sender_id = message.from_user.id
    await telegram_service.send_message("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!", chat_id=sender_id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:", reply_markup=main_menu)


@dp.message()
async def handle_menu_selection(message: types.Message):
    if message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å":
        await get_balance_command(message)
    elif message.text == "–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É":  # Ensure this matches the button text
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=currency_pairs_menu)
    elif message.text == "–ò—Å—Ç–æ—Ä–∏—è –æ—Ä–¥–µ—Ä–æ–≤":
        await get_orders_history_command(message)
    elif message.text == "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä":
        # Ask user to select a currency pair for the order
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞:", reply_markup=currency_pairs_menu)
    elif message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
    elif message.text in ["BTC/USDT", "ETH/USDT", "XRP/USDT"]:  # Check for exact matches to predefined pairs
        await place_order_command(message, message.text)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu)


# Modify place_order_command to accept the selected symbol
async def place_order_command(message: types.Message, symbol: str):
    sender_id = message.from_user.id
    symbol = symbol.replace("/", "")  # Convert BTC/USDT to BTCUSDT

    # Now place the order using the selected currency pair symbol
    order_id = await bybit_service.open_position(symbol=symbol)  # Pass the selected symbol dynamically

    if order_id:
        await message.answer(f"–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –¥–ª—è {symbol}. ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
        logging.info(f"–û—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è {symbol}. ID –æ—Ä–¥–µ—Ä–∞: {order_id}")
        trading_bot = TradingBot(bybit_service, telegram_service, sender_id=sender_id)
        asyncio.create_task(trading_bot.start_monitoring(order_id))
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á–µ—Ç–µ.")
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á–µ—Ç–µ.")


async def get_balance_command(message: types.Message):
    balance = await bybit_service.get_balance()
    if balance is None:
        await message.answer("API key is invalid")
    else:
        await message.answer(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT")


async def get_orders_history_command(message: types.Message):
    history = await bybit_service.get_all_orders(SYMBOL)
    if history:
        for order in history:
            order_text = (
                f"üìù **Order Details**:\n"
                f"üîπ **Order ID**: {order['orderId']}\n"
                f"üîπ **Symbol**: {order['symbol']}\n"
                f"üîπ **Order Type**: {order['orderType']}\n"
                f"üîπ **Side**: {order['side']}\n"
                f"üîπ **Quantity**: {order['qty']}\n"
                f"üîπ **Average Price**: {order['avgPrice']} USD\n"
                f"üîπ **Price**: {order['price']} USD\n"
                f"üîπ **Order Status**: {order['orderStatus']}\n"
                f"üîπ **Time in Force**: {order['timeInForce']}\n"
                f"üîπ **Cumulative Executed Quantity**: {order['cumExecQty']}\n"
                f"üîπ **Cumulative Executed Value**: {order['cumExecValue']} USD\n"
                f"üîπ **Cumulative Execution Fee**: {order['cumExecFee']} USD\n"
                f"üîπ **Creation Time**: {order['createdTime']}\n"
                f"üîπ **Last Price on Creation**: {order['lastPriceOnCreated']} USD\n"
                f"üîπ **Updated Time**: {order['updatedTime']}\n"
            )
            await message.answer(order_text, parse_mode='Markdown')
    else:
        await message.answer("‚ùå No orders found.")


async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        await bybit_service.close()


if __name__ == "__main__":
    asyncio.run(main())
